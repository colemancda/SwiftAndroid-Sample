
import java_swift
import java_util

/// generated by: genswift.java 'java/lang|java/util|java/sql' 'Sources' '../java' ///

/// interface com.johnholdsworth.swiftbindings.SwiftBluetoothBinding$Peripheral$Responder ///

public protocol SwiftBluetoothBinding_Peripheral_Responder: JavaProtocol {

    /// public abstract void com.johnholdsworth.swiftbindings.SwiftBluetoothBinding$Peripheral$Responder.abortReliableWrite()

    func abortReliableWrite()

    /// public abstract boolean com.johnholdsworth.swiftbindings.SwiftBluetoothBinding$Peripheral$Responder.beginReliableWrite()

    func beginReliableWrite() -> Bool

    /// public abstract void com.johnholdsworth.swiftbindings.SwiftBluetoothBinding$Peripheral$Responder.close()

    func close()

    /// public abstract void com.johnholdsworth.swiftbindings.SwiftBluetoothBinding$Peripheral$Responder.disconnect()

    func disconnect()

    /// public abstract boolean com.johnholdsworth.swiftbindings.SwiftBluetoothBinding$Peripheral$Responder.executeReliableWrite()

    func executeReliableWrite() -> Bool

    /// public abstract java.util.List com.johnholdsworth.swiftbindings.SwiftBluetoothBinding$Peripheral$Responder.getServices()

    func getServices() -> java_util.List!

    /// public abstract boolean com.johnholdsworth.swiftbindings.SwiftBluetoothBinding$Peripheral$Responder.readDescriptor(com.johnholdsworth.swiftbindings.SwiftBluetoothBinding$GATTDescriptor)

    func readDescriptor( descriptor: SwiftBluetoothBinding_GATTDescriptor? ) -> Bool

    /// public abstract boolean com.johnholdsworth.swiftbindings.SwiftBluetoothBinding$Peripheral$Responder.readRemoteRssi()

    func readRemoteRssi() -> Bool

    /// public abstract boolean com.johnholdsworth.swiftbindings.SwiftBluetoothBinding$Peripheral$Responder.refresh()

    func refresh() -> Bool

    /// public abstract boolean com.johnholdsworth.swiftbindings.SwiftBluetoothBinding$Peripheral$Responder.requestConnectionPriority(int)

    func requestConnectionPriority( connectionPriority: Int ) -> Bool

    /// public abstract boolean com.johnholdsworth.swiftbindings.SwiftBluetoothBinding$Peripheral$Responder.requestMtu(int)

    func requestMtu( mtu: Int ) -> Bool

    /// public abstract boolean com.johnholdsworth.swiftbindings.SwiftBluetoothBinding$Peripheral$Responder.setCharacteristicNotification(com.johnholdsworth.swiftbindings.SwiftBluetoothBinding$GATTCharacteristic,boolean)

    func setCharacteristicNotification( characteristic: SwiftBluetoothBinding_GATTCharacteristic?, enable: Bool ) -> Bool

    /// public abstract boolean com.johnholdsworth.swiftbindings.SwiftBluetoothBinding$Peripheral$Responder.writeDescriptor(com.johnholdsworth.swiftbindings.SwiftBluetoothBinding$GATTDescriptor)

    func writeDescriptor( descriptor: SwiftBluetoothBinding_GATTDescriptor? ) -> Bool

}


open class SwiftBluetoothBinding_Peripheral_ResponderForward: JNIObjectForward, SwiftBluetoothBinding_Peripheral_Responder {

    private static var SwiftBluetoothBinding_Peripheral_ResponderJNIClass: jclass?

    /// public abstract void com.johnholdsworth.swiftbindings.SwiftBluetoothBinding$Peripheral$Responder.abortReliableWrite()

    private static var abortReliableWrite_MethodID_14: jmethodID?

    open func abortReliableWrite() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "abortReliableWrite", methodSig: "()V", methodCache: &SwiftBluetoothBinding_Peripheral_ResponderForward.abortReliableWrite_MethodID_14, args: &__args, locals: &__locals )
    }


    /// public abstract boolean com.johnholdsworth.swiftbindings.SwiftBluetoothBinding$Peripheral$Responder.beginReliableWrite()

    private static var beginReliableWrite_MethodID_15: jmethodID?

    open func beginReliableWrite() -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "beginReliableWrite", methodSig: "()Z", methodCache: &SwiftBluetoothBinding_Peripheral_ResponderForward.beginReliableWrite_MethodID_15, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }


    /// public abstract void com.johnholdsworth.swiftbindings.SwiftBluetoothBinding$Peripheral$Responder.close()

    private static var close_MethodID_16: jmethodID?

    open func close() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "close", methodSig: "()V", methodCache: &SwiftBluetoothBinding_Peripheral_ResponderForward.close_MethodID_16, args: &__args, locals: &__locals )
    }


    /// public abstract void com.johnholdsworth.swiftbindings.SwiftBluetoothBinding$Peripheral$Responder.disconnect()

    private static var disconnect_MethodID_17: jmethodID?

    open func disconnect() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "disconnect", methodSig: "()V", methodCache: &SwiftBluetoothBinding_Peripheral_ResponderForward.disconnect_MethodID_17, args: &__args, locals: &__locals )
    }


    /// public abstract boolean com.johnholdsworth.swiftbindings.SwiftBluetoothBinding$Peripheral$Responder.executeReliableWrite()

    private static var executeReliableWrite_MethodID_18: jmethodID?

    open func executeReliableWrite() -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "executeReliableWrite", methodSig: "()Z", methodCache: &SwiftBluetoothBinding_Peripheral_ResponderForward.executeReliableWrite_MethodID_18, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }


    /// public abstract java.util.List com.johnholdsworth.swiftbindings.SwiftBluetoothBinding$Peripheral$Responder.getServices()

    private static var getServices_MethodID_19: jmethodID?

    open func getServices() -> java_util.List! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getServices", methodSig: "()Ljava/util/List;", methodCache: &SwiftBluetoothBinding_Peripheral_ResponderForward.getServices_MethodID_19, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_util.ListForward( javaObject: __return ) : nil
    }


    /// public abstract boolean com.johnholdsworth.swiftbindings.SwiftBluetoothBinding$Peripheral$Responder.readDescriptor(com.johnholdsworth.swiftbindings.SwiftBluetoothBinding$GATTDescriptor)

    private static var readDescriptor_MethodID_20: jmethodID?

    open func readDescriptor( descriptor: SwiftBluetoothBinding_GATTDescriptor? ) -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: descriptor, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "readDescriptor", methodSig: "(Lcom/johnholdsworth/swiftbindings/SwiftBluetoothBinding$GATTDescriptor;)Z", methodCache: &SwiftBluetoothBinding_Peripheral_ResponderForward.readDescriptor_MethodID_20, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }

    open func readDescriptor( _ _descriptor: SwiftBluetoothBinding_GATTDescriptor? ) -> Bool {
        return readDescriptor( descriptor: _descriptor )
    }

    /// public abstract boolean com.johnholdsworth.swiftbindings.SwiftBluetoothBinding$Peripheral$Responder.readRemoteRssi()

    private static var readRemoteRssi_MethodID_21: jmethodID?

    open func readRemoteRssi() -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "readRemoteRssi", methodSig: "()Z", methodCache: &SwiftBluetoothBinding_Peripheral_ResponderForward.readRemoteRssi_MethodID_21, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }


    /// public abstract boolean com.johnholdsworth.swiftbindings.SwiftBluetoothBinding$Peripheral$Responder.refresh()

    private static var refresh_MethodID_22: jmethodID?

    open func refresh() -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "refresh", methodSig: "()Z", methodCache: &SwiftBluetoothBinding_Peripheral_ResponderForward.refresh_MethodID_22, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }


    /// public abstract boolean com.johnholdsworth.swiftbindings.SwiftBluetoothBinding$Peripheral$Responder.requestConnectionPriority(int)

    private static var requestConnectionPriority_MethodID_23: jmethodID?

    open func requestConnectionPriority( connectionPriority: Int ) -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(connectionPriority) )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "requestConnectionPriority", methodSig: "(I)Z", methodCache: &SwiftBluetoothBinding_Peripheral_ResponderForward.requestConnectionPriority_MethodID_23, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }

    open func requestConnectionPriority( _ _connectionPriority: Int ) -> Bool {
        return requestConnectionPriority( connectionPriority: _connectionPriority )
    }

    /// public abstract boolean com.johnholdsworth.swiftbindings.SwiftBluetoothBinding$Peripheral$Responder.requestMtu(int)

    private static var requestMtu_MethodID_24: jmethodID?

    open func requestMtu( mtu: Int ) -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(mtu) )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "requestMtu", methodSig: "(I)Z", methodCache: &SwiftBluetoothBinding_Peripheral_ResponderForward.requestMtu_MethodID_24, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }

    open func requestMtu( _ _mtu: Int ) -> Bool {
        return requestMtu( mtu: _mtu )
    }

    /// public abstract boolean com.johnholdsworth.swiftbindings.SwiftBluetoothBinding$Peripheral$Responder.setCharacteristicNotification(com.johnholdsworth.swiftbindings.SwiftBluetoothBinding$GATTCharacteristic,boolean)

    private static var setCharacteristicNotification_MethodID_25: jmethodID?

    open func setCharacteristicNotification( characteristic: SwiftBluetoothBinding_GATTCharacteristic?, enable: Bool ) -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: characteristic, locals: &__locals )
        __args[1] = jvalue( z: jboolean(enable ? JNI_TRUE : JNI_FALSE) )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "setCharacteristicNotification", methodSig: "(Lcom/johnholdsworth/swiftbindings/SwiftBluetoothBinding$GATTCharacteristic;Z)Z", methodCache: &SwiftBluetoothBinding_Peripheral_ResponderForward.setCharacteristicNotification_MethodID_25, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }

    open func setCharacteristicNotification( _ _characteristic: SwiftBluetoothBinding_GATTCharacteristic?, _ _enable: Bool ) -> Bool {
        return setCharacteristicNotification( characteristic: _characteristic, enable: _enable )
    }

    /// public abstract boolean com.johnholdsworth.swiftbindings.SwiftBluetoothBinding$Peripheral$Responder.writeDescriptor(com.johnholdsworth.swiftbindings.SwiftBluetoothBinding$GATTDescriptor)

    private static var writeDescriptor_MethodID_26: jmethodID?

    open func writeDescriptor( descriptor: SwiftBluetoothBinding_GATTDescriptor? ) -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: descriptor, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "writeDescriptor", methodSig: "(Lcom/johnholdsworth/swiftbindings/SwiftBluetoothBinding$GATTDescriptor;)Z", methodCache: &SwiftBluetoothBinding_Peripheral_ResponderForward.writeDescriptor_MethodID_26, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }

    open func writeDescriptor( _ _descriptor: SwiftBluetoothBinding_GATTDescriptor? ) -> Bool {
        return writeDescriptor( descriptor: _descriptor )
    }

}

